// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1 the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", .
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     And(a=instruction[8], b=instruction[7], out=reg);
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
      ny=instruction[2], f=instruction[1], no=instruction[0], 
      out=o1, zr=zr1, ng=ng1);
     
     Mux16(a=y, b=x, sel=instruction[4], out=needshift);  // Select shifted variable
     ShiftLeft(in=needshift, out=lshift);
     ShiftRight(in=needshift, out=rshift);
     Mux16(a=rshift, b=lshift, sel=instruction[5], out=o2);
     ALU(x=o2, y=o2, zx=false, nx=false, zy=true, ny=true, f=false, no=false,
      out=o3, zr=zr2, ng=ng2);
     Mux16(a=o3, b=o1, sel=instruction[8], out=out);
     Mux(a=zr2, b=zr1, sel=instruction[8], out=zr);
     Mux(a=ng2, b=ng1, sel=instruction[8], out=ng);
}
